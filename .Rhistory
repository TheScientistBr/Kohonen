source('D:/Data Science/tools/iClassFile.R')
setwd("D:/Data Science/r/TextMining")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass(1)
plotClass("at2")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2")
plotClass("at2")
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
plotClass("at2")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2",compare = "index/004062006at2.txt.idx")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2",compare = "index/004062006at2.txt.idx")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2",compare = "index/004062006at2.txt.idx")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2",compare = "index/004062006at2.txt.idx")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2",compare = "index/004062006at2.txt.idx")
source('D:/Data Science/r/aTribunaDev/plotClass.R')
source('D:/Data Science/r/aTribunaDev/plotClass.R')
source('D:/Data Science/r/aTribunaDev/plotClass.R')
plotClass("at2",compare = "index/004062006at2.txt.idx")
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
iClassFile("index/004062006at2.txt.idx",wplot = TRUE)
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
iClassFile("index/004062006at2.txt.idx",wplot = TRUE)
iClassFile("index/004062006at2.txt.idx",wplot = TRUE)
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
iClassFile("index/004062006at2.txt.idx",wplot = TRUE)
iCLassFileAll(1,maxFiles = 10)
showResults(1)
showResults(1,print = TRUE)
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
setwd("D:/Data Science/r")
x <- 3
if(x > 3) {
y <- 10
} else {
y <- 0
}
print(x,y)
print(c(x,y))
y <- if(x > 3) {
10
} else {
0
}
x <- 2
y <- if(x > 3) {
10
} else {
0
}
y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x <- 5
y <- if(x > 3) {
10
} else {
2
}
x <- 2
y <- if(x > 3) {
10
} else {
0
}
if( x> 3)
y <- 4
if( x < 3)
y <- 4
source('~/.active-rstudio-document')
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letter in x) {
print(letter)
}
x <- matrix(1:6, 2, 3)
x
nrow(x)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
for(i in seq_len(ncow(x))) {
for(j in seq_len(nrol(x))) {
print(x[i, j])
}
}
for(i in seq_len(ncol(x))) {
for(j in seq_len(nrol(x))) {
print(x[i, j])
}
}
for(j in seq_len(nrow(x))) {
print(x[i, j])
}
for(j in seq_len(ncol(x))) {
for(i in seq_len(nrow(x))) {
print(x[i, j])
}
}
print(x[j, i])
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
count <- 1
while(count <= 10) {
print(count)
count <- count + 1
}
count <- 1
ct <- 5
while(count <= 10, ct == 5) {
print(count)
count <- count + 1
if(count == 5)
ct = 9
}
while(count <= 10, ct == 5) {
print(count)
count <- count + 1
if(count == 5)
ct <- 9
}
while(count <= 10 && ct == 5) {
print(count)
count <- count + 1
if(count == 5)
ct <- 9
}
while(count <= 10 , ct == 5) {
print(count)
count <- count + 1
if(count == 5)
ct <- 9
}
while(count <= 10 && ct == 5) {
print(count)
count <- count + 1
if(count == 5)
ct <- 9
}
while(count <= 10 && ct == 5) {
print(count)
count <- count + 1
if(count == 5)
ct <- 9
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd("D:/Data Science/r/Kohonen")
require(kohonen)
install.packages("kohonen")
require(kohonen)
dataset000 <- read_delim("D:/Data Science/r/Kohonen/data/dataset000.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
dataset000 <- read_delim("D:/Data Science/r/Kohonen/data/dataset000.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
data_train_matrix <- as.matrix(scale(dataset000))
som_grid <- somgrid(xdim = 20, ydim=20, topo="hexagonal")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=100,
alpha=c(0.05,0.01), keep.data = TRUE,
n.hood = "circular")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=100,
alpha=c(0.05,0.01), keep.data = TRUE)
rep(5,5)
rep(5,3)
rep(c(80,443),5)
rep(c(80,443),c(5,3))
rep(c(80,443,21,22,23),c(5,3))
rep(c(80,443,21,22,23),c(5,3,2,1,3))
runif(5,80,443)
require(kohonen)
library(readr)
normal <- data.frame(id = 1:1000, trafic = rnorm(1000,25,3),
prot = rep(c(80,443,21,22,23),c(100,100,100,100,100)),
user = rep(c(1,2,3,4,5),c(200,200,200,200,200)))
data_train_matrix <- as.matrix(scale(normal))
som_grid <- somgrid(xdim = 20, ydim=20, topo="hexagonal")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=100,
alpha=c(0.05,0.01), keep.data = TRUE,
n.hood = "circular")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=1000,
alpha=c(0.05,0.01), keep.data = TRUE,
n.hood = "circular")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=1000,
alpha=c(0.05,0.01), keep.data = TRUE)
plot(som_model, type="changes")
plot(som_model, type="count")
plot(som_model, type="dist.neighbours")
plot(som_model, type="codes")
plot(som_model, type = "property", property = som_model$codes[,4],
main=names(som_model$data)[4], palette.name=coolBlueHotRed)
som_model$codes[,4]
som_model$codes
som_model$codes[,4]
names(som_model$data)[4]
som_model$data
plot(som_model, type = "property", property = som_model$codes[,4],
main=names(som_model$data)[4])
plot(som_model, type = "property", property = som_model$codes[,3],
main=names(som_model$data)[4])
plot(som_model, type = "property", property = som_model$codes[,3],
main=names(som_model$data)[3])
plot(som_model, type = "property")
var <- 2 #define the variable to plot
var_unscaled <- aggregate(as.numeric(data_train[,var]),
by=list(som_model$unit.classif), FUN=mean, simplify=TRUE)[,2]
plot(som_model, type = "property", property=var_unscaled,
main=names(data_train)[var], palette.name=coolBlueHotRed)
var_unscaled <- aggregate(as.numeric(normal[,var]),
by=list(som_model$unit.classif),
FUN=mean, simplify=TRUE)[,2]
plot(som_model, type = "property", property=var_unscaled,
main=names(data_train)[var], palette.name=coolBlueHotRed)
plot(som_model, type = "property", property=var_unscaled,
main=names(normal)[var], palette.name=coolBlueHotRed)
plot(som_model, type = "property", property=var_unscaled,
main=names(normal)[var])
plot(som_model, type = "property", property = som_model$codes[,4],
main=names(som_model$data)[4], palette.name=coolBlueHotRed)
plot(som_model, type = "property", property = som_model$codes[,4],
main=names(som_model$data)[4])
mydata <- som_model$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
add.cluster.boundaries(som_model, som_cluster)
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster],
main = "Clusters")
plot(som_model, type="mapping", bgcol = som_cluster,
main = "Clusters")
som_cluster <- cutree(hclust(dist(som_model$codes)), 6)
som_cluster <- cutree(hclust(dist(som_model$codes)))
plot(wss)
mydata <- som_model$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
palette
normal <- data.frame(trafic = rnorm(1000,25,3),
prot = rep(c(80,443,21,22,23),c(100,100,100,100,100)),
user = rep(c(1,2,3,4,5),c(200,200,200,200,200)))
data_train_matrix <- as.matrix(scale(normal))
som_grid <- somgrid(xdim = 20, ydim=20, topo="hexagonal")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=1000,
alpha=c(0.05,0.01), keep.data = TRUE)
plot(som_model, type="changes")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=100,
alpha=c(0.05,0.01), keep.data = TRUE)
plot(som_model, type="changes")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=1000,
alpha=c(0.05,0.01), keep.data = TRUE)
plot(som_model, type="changes")
plot(som_model, type="count")
plot(som_model, type="dist.neighbours")
plot(som_model, type="codes")
plot(som_model, type = "property", property = som_model$codes[,4],
main=names(som_model$data)[4], palette.name=coolBlueHotRed)
plot(som_model, type = "property", property = som_model$codes[,4],
main=names(som_model$data)[4])
plot(som_model, type = "property", property = som_model$codes[,3],
main=names(som_model$data)[3])
som_model$data
head(som_model$data)
names(som_model$data)
som_model$codes
plot(som_model, type = "property", property = som_model$codes[,1])
plot(som_model, type = "property", property = som_model$codes,
main=names(som_model$data)[4])
head(som_model$codes)
plot(som_model, type = "property", property = som_model$codes[[1]][,1],
main=names(som_model$data)[4])
var <- 2 #define the variable to plot
var_unscaled <- aggregate(as.numeric(normal[,var]),
by=list(som_model$unit.classif),
FUN=mean, simplify=TRUE)[,2]
plot(som_model, type = "property", property=var_unscaled,
main=names(normal)[var])
var <- 1 #define the variable to plot
var_unscaled <- aggregate(as.numeric(normal[,var]),
by=list(som_model$unit.classif),
FUN=mean, simplify=TRUE)[,2]
plot(som_model, type = "property", property=var_unscaled,
main=names(normal)[var])
mydata <- som_model$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
nrow(mydata
)
mydata <- som_model$codes
mydata
wss <- (nrow(mydata[[1]])-1)*sum(apply(mydata,2,var))
nrow(mydata[[1]])
apply(mydata,2,var)
wss <- (nrow(mydata[[1]])-1)*sum(apply(mydata[[1]],2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
wss[i] <- sum(kmeans(mydata[[1]], centers=i)$withinss)
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata[[1]], centers=i)$withinss)
}
plot(wss)
som_cluster <- cutree(hclust(dist(som_model$codes)), 6)
som_cluster <- cutree(hclust(dist(som_model$codes)), 3)
som_model$codes
dist(som_model$codes)
som_cluster <- cutree(hclust(dist(som_model$codes,method = "e")), 6)
som_cluster <- cutree(hclust(dist(som_model$codes,method = "euclidian")), 6)
som_cluster <- cutree(hclust(dist(som_model$codes[1])), 6)
som_model$codes[1]
som_cluster <- cutree(hclust(dist(som_model$codes[,1])), 6)
som_cluster <- cutree(hclust(dist(som_model$codes[,1])), 3)
som_cluster <- cutree(hclust(dist(som_model$codes)), 1)
plot(som_model, type="mapping", main = "Clusters"))
plot(som_model, type="mapping", main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
source('D:/Data Science/r/Kohonen/detectingAnomalies.R')
normal
normal[125,]
normal[125,]$trafic <- 650
normal[125:200,]$trafic <- 650
normal[125,]$trafic <- 650
normal[125,]
data_train_matrix <- as.matrix(scale(normal))
som_grid <- somgrid(xdim = 20, ydim=20, topo="hexagonal")
som_model <- som(data_train_matrix,
grid=som_grid, rlen=1000,
alpha=c(0.05,0.01), keep.data = TRUE)
plot(som_model, type="changes")
plot(som_model, type="count")
plot(som_model, type="dist.neighbours")
plot(som_model, type="codes")
plot(som_model, type = "property", property = som_model$codes[[1]][,1],
main=names(som_model$data)[4])
var <- 1 #define the variable to plot
var_unscaled <- aggregate(as.numeric(normal[,var]),
by=list(som_model$unit.classif),
FUN=mean, simplify=TRUE)[,2]
plot(som_model, type = "property", property=var_unscaled,
main=names(normal)[var])
source('D:/Data Science/r/Kohonen/detectingAnomalies.R')
